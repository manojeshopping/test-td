<?php
/**
 * @author     Kristof Ringleff
 * @package    Fooman_DpsPro
 * @copyright  Copyright (c) 2013 Fooman Limited (http://www.fooman.co.nz)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

class Fooman_DpsPro_Model_Method_PxpayPro extends MageBase_DpsPaymentExpress_Model_Method_Pxpay
{
    const CREATE_BILLING_AGREEMENT = 1;

    protected $_canCapture = true;
    protected $_canReviewPayment = true;
    protected $_canRefund = true;
    protected $_isGateway = true;

    protected $_formBlockType = 'foomandpspro/pxpayPro_form';

    public function canRefund()
    {
        return $this->_isOnlineCreditmemoAvailable();
    }

    public function canCapture()
    {
        if (parent::canCapture()) {
            $pxpostPaymentModel = Mage::getModel('magebasedps/method_pxpost');
            $invoice = Mage::registry('current_invoice');

            if ($invoice) {
                $origDpsTxnRef = Mage::helper('magebasedps')->getAdditionalData(
                    $invoice->getOrder()->getPayment(), 'DpsTxnRef'
                );
                return ($origDpsTxnRef && $pxpostPaymentModel->getPostUsername()
                    && $pxpostPaymentModel->getPostPassword());
            }
        }
        return false;
    }

    public function canRefundPartialPerInvoice()
    {
        return $this->_isOnlineCreditmemoAvailable();
    }

    protected function _isOnlineCreditmemoAvailable()
    {
        $pxpostPaymentModel = Mage::getModel('magebasedps/method_pxpost');
        $creditmemo = Mage::registry('current_creditmemo');
        $invoice = Mage::registry('current_invoice');
        if ($invoice) {
            $origDpsTxnRef = Mage::helper('magebasedps')->getAdditionalData(
                $invoice->getOrder()->getPayment(), 'DpsTxnRef'
            );
            return ($origDpsTxnRef && $pxpostPaymentModel->getPostUsername() && $pxpostPaymentModel->getPostPassword());
        } elseif ($creditmemo) {
            $origDpsTxnRef = Mage::helper('magebasedps')->getAdditionalData(
                $creditmemo->getOrder()->getPayment(), 'DpsTxnRef'
            );
            return ($origDpsTxnRef && $pxpostPaymentModel->getPostUsername() && $pxpostPaymentModel->getPostPassword());
        } else {
            return false;
        }
    }

    /**
     * Accepts the payment previously authorized
     *
     * @param Mage_Payment_Model_Info $payment
     * @return bool
     */
    public function acceptPayment(Mage_Payment_Model_Info $payment)
    {
        parent::acceptPayment($payment);
        Mage::helper('foomandpspro')->acceptPayment($payment, $this);
        return true;
    }

    /**
     * Denies the payment previously authorized
     *
     * @param Mage_Payment_Model_Info $payment
     * @return bool
     */
    public function denyPayment(Mage_Payment_Model_Info $payment)
    {
        parent::denyPayment($payment);
        Mage::helper('foomandpspro')->denyPayment($payment, $this);
        return true;
    }

    public function refund(Varien_Object $payment, $amount)
    {
        $pxpostPaymentModel = Mage::getModel('magebasedps/method_pxpost');
        $pxpostPaymentModel->setData('info_instance', $this->getInfoInstance());
        return $pxpostPaymentModel->refund($payment, $amount);
    }

    public function capture(Varien_Object $payment, $amount)
    {
        $pxpostPaymentModel = Mage::getModel('magebasedps/method_pxpost');
        $pxpostPaymentModel->setData('info_instance', $this->getInfoInstance());
        return $pxpostPaymentModel->capture($payment, $amount);
    }


    /**
     * retrieve payment action from database
     * Auth or Purchase
     *
     * @param bool $isSuspectedFraud
     *
     * @return int
     */
    protected function _getPxPayPaymentAction($isSuspectedFraud = false)
    {
        if ($isSuspectedFraud) {
            return MageBase_DpsPaymentExpress_Model_Method_Common::ACTION_AUTHORIZE;
        } else {
            return parent::_getPxPayPaymentAction();
        }
    }

    /**
     * retrieve PxPayUrl to redirect customer to (generated by DPS)
     *
     * @return string
     */
    protected function _getPxPayUrl()
    {
        try {
            $quote = $this->getInfoInstance()->getQuote();
            $txnId = Mage::helper('foomandpspro')->generateTxnId();
            $recurring = Mage::helper('foomandpspro')->getCcSaveFromPost() ? self::CREATE_BILLING_AGREEMENT : '';

            $dataMaxmindArray = json_decode($quote->getPayment()->getAdditionalData(), true);
            if (Mage::getStoreConfig('payment/' . $this->_code . '/use_maxmind_fraud_detection')
                && isset($dataMaxmindArray['riskScore'])
            ) {
                $paymentAction = $this->_getPxPayPaymentAction($this->_isFraud($dataMaxmindArray['riskScore']));
            } else {
                $paymentAction = $this->_getPxPayPaymentAction();
            }

            return $this->_getPxPayUrlResponse($paymentAction, $txnId, '', $recurring, $recurring);
        } catch (Exception $e) {
            Mage::logException($e);
            return false;
        }
    }


    /**
     * Save info to payment and send email to customer
     *
     * @param SimpleXMLElement $responseXml
     */
    protected function _acknowledgeOrder($responseXml)
    {
        $order = $this->_getOrder($responseXml);
        $payment = $order->getPayment();
        $fraud = $order->getStatus()
            == Mage::getStoreConfig('payment_services/foomandpspro/order_status_suspected_fraud', $this->getStore());
        $payment->setTransactionId((string)$responseXml->DpsTxnRef);
        $payment->setLastTransId((string)$responseXml->DpsTxnRef);

        $this->setAdditionalData($responseXml, $payment);
        $payment->setIsTransactionClosed(0);
        if ($fraud) {
            $payment->setIsTransactionPending(true);
        }
        $payment->registerAuthorizationNotification((string)$responseXml->AmountSettlement);
        if ($fraud) {
            $payment->setIsFraudDetected(true);
            $fraudStatus = Mage::getStoreConfig(
                'payment_services/foomandpspro/order_status_suspected_fraud',
                $this->getStore()
            );
            if (version_compare(Mage::getVersion(), '1.4.1.0', '>=')) {
                $order->setState(Mage_Sales_Model_Order::STATE_PAYMENT_REVIEW, $fraudStatus, '');
            } else {
                $order->setState(Mage_Sales_Model_Order::STATE_PENDING_PAYMENT, $fraudStatus, '');
            }
        } else {
            $order->setStatus(Mage::getStoreConfig('payment/' . $this->_code . '/order_status', $this->getStore()));
        }
        $order->save();
        if (!$order->getEmailSent()) {
            $order->sendNewOrderEmail();
            $order->setEmailSent(true);
        }
        $order->save();
    }

    /**
     * Create invoice, save info to payment and send email to customer
     *
     * @param SimpleXMLElement $responseXml
     */
    protected function _registerPayment($responseXml)
    {
        $txnId = (string)$responseXml->TxnId;
        $order = $this->_getOrder($responseXml);
        $payment = $order->getPayment();
        $payment->setOrder($order);
        $this->setAdditionalData($responseXml, $payment);
        $payment->setTransactionId($txnId);
        $payment->registerCaptureNotification((string)$responseXml->AmountSettlement);
        $invoice = $payment->getCreatedInvoice();
        if ($order->getStatus()
            != Mage::getStoreConfig('payment_services/foomandpspro/order_status_suspected_fraud', $this->getStore())) {
            $order->setStatus(Mage::getStoreConfig('payment/' . $this->_code . '/order_status', $this->getStore()));
        }
        $order->save();
        $this->_sendEmails($order, $invoice);
        $order->save();
        $this->createBillingAgreements($responseXml, $order);
    }

    public function createBillingAgreements($responseXml, $order)
    {
        if (!empty($responseXml->DpsBillingId) && !empty($responseXml->TxnData3)
            && (int)$responseXml->TxnData3 == self::CREATE_BILLING_AGREEMENT
        ) {
            $billingAgreement = Mage::getModel('sales/billing_agreement')->load(
                (string)$responseXml->DpsBillingId, 'reference_id'
            );
            $billingAgreement->setCustomerId($order->getCustomerId())
                ->setMethodCode($this->_code)
                ->setReferenceId((string)$responseXml->DpsBillingId)
                ->setStatus(Mage_Sales_Model_Billing_Agreement::STATUS_ACTIVE)
                ->setAgreementLabel(
                    substr((string)$responseXml->CardNumber, 0, 4)."............"
                    .substr((string)$responseXml->CardNumber, -2)
                    . ' ' . substr((string)$responseXml->DateExpiry, 0, 2) . '/'
                    .'20'. substr((string)$responseXml->DateExpiry, 2)
                )
                ->setStoreId($order->getStoreId())
                ->addOrderRelation($order->getId())
                ->save();

            if ($billingAgreement->getId()) {
                if ($billingAgreement->isValid()) {
                    $message = Mage::helper('sales')->__('Created billing agreement #%s.', $billingAgreement->getId());
                } else {
                    $message = Mage::helper('sales')->__('Failed to create billing agreement for this order.');
                }
                $order->addStatusHistoryComment($message);
                $order->save();
            }
        }

    }

    /**
     * is fraud score high enough to be fraud
     *
     * @param $fraudScore int
     *
     * @return bool
     */
    protected function _isFraud($fraudScore = 0)
    {
        return Mage::getModel('foomandpspro/method_common_maxmind')->isFraud($fraudScore);
    }
}
