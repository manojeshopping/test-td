<?php
/**
 * @author     Kristof Ringleff
 * @package    Fooman_DpsPro
 * @copyright  Copyright (c) 2013 Fooman Limited (http://www.fooman.co.nz)
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
class Fooman_DpsPro_Model_Method_SimplePxpay extends MageBase_DpsPaymentExpress_Model_Method_Pxpay
{

    const URL_SIMPLE_PXPAY_SUCCESS = 'foomandpspro/payment/success';
    const URL_SIMPLE_PXPAY_FAIL = 'foomandpspro/payment/fail';

    const XML_PATH_EMAIL_TEMPLATE = 'payment/magebasedpspxpay/payment_email_template';
    const XML_PATH_EMAIL_IDENTITY = 'payment/magebasedpspxpay/payment_email_identity';

    const DPS_LOG_FILENAME = 'dpspro_payments.log';

    /**
     * retrieve PxPayUrl to redirect customer to (generated by DPS)
     *
     * @param array $data
     *
     * @return string
     */
    public function getSimplePxPayUrl($data = array())
    {
        try {
            $txnId = Mage::helper('foomandpspro')->generateTxnId();
            $client = new Zend_Http_Client();
            $client->setUri(self::URL_PXPAY);
            $client->setConfig(
                array(
                     'maxredirects' => 0,
                     'timeout'      => 30,
                )
            );

            $xml = new SimpleXMLElement('<GenerateRequest></GenerateRequest>');
            $xml->addChild('PxPayUserId', htmlentities($this->_getPxPayUserId()));
            $xml->addChild('PxPayKey', htmlentities($this->_getPxPayKey()));
            $xml->addChild('AmountInput', trim(htmlentities(sprintf("%9.2f", $data['amountInput']))));
            $xml->addChild('BillingId', '');
            $xml->addChild('CurrencyInput', htmlentities($data['currencyCode']));
            $xml->addChild('EmailAddress', '');
            $xml->addChild('EnableAddBillCard', '0');
            $xml->addChild('MerchantReference', htmlentities($data['merchantReference']));
            $xml->addChild('TxnData1', '');
            $xml->addChild('TxnData2', '');
            $xml->addChild('TxnData3', '');
            $xml->addChild('TxnType', htmlentities($this->_getPxPayPaymentAction()));
            $xml->addChild('TxnId', $txnId);
            $xml->addChild('UrlFail', htmlentities(Mage::getUrl(self::URL_SIMPLE_PXPAY_FAIL, array('_nosid' => true))));
            $xml->addChild(
                'UrlSuccess', htmlentities(Mage::getUrl(self::URL_SIMPLE_PXPAY_SUCCESS, array('_nosid' => true)))
            );
            $xml->addChild('Opt', '');

            $client->setParameterPost('xml', $xml->asXML());

            if ($this->debugToDb()) {
                $debugEntry = Mage::getModel('magebasedps/debug')
                    ->setRequestBody($xml->asXML())
                    ->save();
            }
            $response = $client->request('POST');

            $responseXml = simplexml_load_string($response->getBody());
            if ($this->debugToDb()) {
                $debugEntry->setResponseBody($response->getBody())
                    ->save();
            }
            if ($responseXml['valid'] == 1) {
                return strval($responseXml->URI);
            }
            return false;
        } catch (Exception $e) {
            echo $e->getMessage();
            Mage::logException($e);
            return false;
        }
    }

    public function resultXmlToArray($resultXml)
    {
        $data = array();
        $data['amount'] = (float)$resultXml->AmountSettlement;
        $data['card_holder_name'] = (string)$resultXml->CardHolderName;
        $data['reference'] = (string)$resultXml->MerchantReference;
        $data['card_name'] = (string)$resultXml->CardName;
        $data['currency'] = (string)$resultXml->CurrencySettlement;
        $data['dps_transaction_reference'] = (string)$resultXml->DpsTxnRef;
        return $data;
    }

    public function processSuccess($data)
    {
        $magebasePayment = Mage::getModel('foomandpspro/payment');
        $magebasePayment->load($data['dps_transaction_reference'], 'dps_transaction_reference');
        if (!$magebasePayment->getId()) {
            $magebasePayment->setData($data);
            $magebasePayment->save();
            $this->sendPaymentEmail($data);
        }
    }

    public function sendPaymentEmail($data)
    {

        $template = Mage::getStoreConfig(self::XML_PATH_EMAIL_TEMPLATE);
        $paymentContact = Mage::getStoreConfig(self::XML_PATH_EMAIL_IDENTITY);

        $translate = Mage::getSingleton('core/translate');
        /* @var $translate Mage_Core_Model_Translate */
        $translate->setTranslateInline(false);

        $emailTemplate = Mage::getModel('core/email_template');
        /* @var $emailTemplate Mage_Core_Model_Email_Template */

        $emailTemplate->setDesignConfig(array('area' => 'frontend'))
            ->sendTransactional(
                $template,
                Mage::getStoreConfig(self::XML_PATH_EMAIL_IDENTITY),
                Mage::getStoreConfig('trans_email/ident_' . $paymentContact . '/email'),
                Mage::getStoreConfig('trans_email/ident_' . $paymentContact . '/name'),
                $data
            );
        $translate->setTranslateInline(true);
    }

}
